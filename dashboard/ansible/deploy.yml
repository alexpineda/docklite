---
- name: Deploy API Services
  hosts: api_server
  become: yes
  vars_files:
    - vars/services_to_deploy.yml
    - vars/domain.yml
  vars:
    docker_network: api_network

  tasks:
    - name: Ensure Docker network exists
      community.docker.docker_network:
        name: "{{ docker_network }}"
        state: present

    - name: Ensure host directories exist for each service
      file:
        path: "{{ item.host_path }}"
        state: directory
        mode: '0755'
      loop: "{{ api_services }}"

    - name: Deploy API services
      community.docker.docker_container:
        name: "{{ item.name }}"
        image: "{{ item.image }}"
        state: started
        restart_policy: unless-stopped
        pull: true
        force_kill: true
        recreate: true
        networks:
          - name: "{{ docker_network }}"
        published_ports:
          - "127.0.0.1:3000:3000"
        volumes:
          - "{{ item.host_path }}:{{ item.container_mount_path }}"
        platform: "linux/amd64"
        env: "{{ item.env_vars | default({}) | combine({'APP_MOUNT_PATH': item.container_mount_path}) }}"
      loop: "{{ api_services }}"

    - name: Verify mount points for each service
      block:
        - name: Create test file in host directory
          copy:
            content: "Mount verification file - {{ ansible_date_time.iso8601 }}"
            dest: "{{ item.host_path }}/mount-verify.txt"
          loop: "{{ api_services }}"

        - name: Verify test file is accessible inside container
          shell: "docker exec {{ item.name }} cat {{ item.container_mount_path }}/mount-verify.txt"
          register: verify_result
          loop: "{{ api_services }}"
          changed_when: false

        - name: Show mount verification results
          debug:
            msg: "Mount verified for {{ item.item.name }}: file accessible in container at {{ item.item.container_mount_path }}"
          loop: "{{ verify_result.results }}"
          when: item.rc == 0

        - name: Cleanup test files
          file:
            path: "{{ item.host_path }}/mount-verify.txt"
            state: absent
          loop: "{{ api_services }}"
      rescue:
        - name: Report mount verification failure
          fail:
            msg: "Mount verification failed. Please check container logs and mount configuration."
          when: verify_result.failed is defined and verify_result.failed

    - name: Configure Caddy for each service
      template:
        src: templates/caddy/api_block.j2
        dest: /etc/caddy/conf.d/{{ item.name }}.conf
      loop: "{{ api_services }}"
      notify: reload caddy

    - name: Configure main Caddy file
      copy:
        content: |
          {
              email {{ caddy_email }}
          }

          import /etc/caddy/conf.d/*

        dest: /etc/caddy/Caddyfile
      notify: reload caddy

  handlers:
    - name: reload caddy
      systemd:
        name: caddy
        state: reloaded 